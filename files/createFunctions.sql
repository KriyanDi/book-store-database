CREATE FUNCTION GET_PROD_INFO(P_SKU INTEGER)
    RETURNS TABLE
            (
                BARCODE     CHAR(12),
                CATEGORY    VARCHAR(100),
                SINGLEPRICE DECIMAL(9, 2)
            )
BEGIN
    ATOMIC

    DECLARE SKUBOOK INTEGER;
    DECLARE SKUNOTEBOOK INTEGER;
    DECLARE SKUPEN INTEGER;
    DECLARE SKUPENCIL INTEGER;

    DECLARE BARCODERES CHAR(12);
    DECLARE CATEGORYRES VARCHAR(100);
    DECLARE SINGLPRICERES DECIMAL(9, 2);

    SET SKUBOOK = (SELECT SKU FROM BOOK WHERE SKU = P_SKU);
    SET SKUNOTEBOOK = (SELECT SKU FROM NOTEBOOK WHERE SKU = P_SKU);
    SET SKUPEN = (SELECT SKU FROM PEN WHERE SKU = P_SKU);
    SET SKUPENCIL = (SELECT SKU FROM PENCIL WHERE SKU = P_SKU);

    IF SKUBOOK IS NOT NULL THEN
        SET BARCODERES = (SELECT BARCODE FROM BOOK WHERE SKU = P_SKU);
        SET CATEGORYRES = (SELECT CATEGORY FROM BOOK WHERE SKU = P_SKU);
        SET SINGLPRICERES = (SELECT PRICE FROM BOOK WHERE SKU = P_SKU);
    END IF;

    IF SKUNOTEBOOK IS NOT NULL THEN
        SET BARCODERES = (SELECT BARCODE FROM NOTEBOOK WHERE SKU = P_SKU);
        SET CATEGORYRES = (SELECT CATEGORY FROM NOTEBOOK WHERE SKU = P_SKU);
        SET SINGLPRICERES = (SELECT PRICE FROM NOTEBOOK WHERE SKU = P_SKU);
    END IF;

    IF SKUPEN IS NOT NULL THEN
        SET BARCODERES = (SELECT BARCODE FROM PEN WHERE SKU = P_SKU);
        SET CATEGORYRES = (SELECT CATEGORY FROM PEN WHERE SKU = P_SKU);
        SET SINGLPRICERES = (SELECT PRICE FROM PEN WHERE SKU = P_SKU);
    END IF;

    IF SKUPENCIL IS NOT NULL THEN
        SET BARCODERES = (SELECT BARCODE FROM PENCIL WHERE SKU = P_SKU);
        SET CATEGORYRES = (SELECT CATEGORY FROM PENCIL WHERE SKU = P_SKU);
        SET SINGLPRICERES = (SELECT PRICE FROM PENCIL WHERE SKU = P_SKU);
    END IF;

    RETURN VALUES (BARCODERES, CATEGORYRES, SINGLPRICERES);
END;

CREATE FUNCTION ORD_STAT_INFO(P_ORDNO CHARACTER(6))
    RETURNS VARCHAR(15)
BEGIN
    ATOMIC

    DECLARE ORDERNO CHARACTER(6);
    DECLARE STATUS VARCHAR(15);

    SET ORDERNO = (SELECT O.ORDERNO FROM ORDER AS O WHERE O.ORDERNO = P_ORDNO);

    IF ORDERNO IS NOT NULL THEN
        SET STATUS = (SELECT O.STATUS FROM ORDER AS O WHERE O.ORDERNO = P_ORDNO);
    END IF;

    IF ORDERNO IS NULL THEN
        SET STATUS = '#INEXIST';
    END IF;

    RETURN STATUS;
END;

CREATE FUNCTION IS_EMAIL_OCP(P_EMAIL CHARACTER(30))
    RETURNS INTEGER
BEGIN
    ATOMIC

    DECLARE VAR_EMAIL CHARACTER(30);

    SET VAR_EMAIL = (SELECT EMAIL FROM MEMBER WHERE EMAIL = P_EMAIL);

    IF VAR_EMAIL IS NULL THEN
        RETURN 0;
    ELSE
        RETURN 1;
    END IF;
END;

CREATE FUNCTION NUM_OF_PEOPLE(P_IDADDRESS INTEGER)
    RETURNS INTEGER
BEGIN
    ATOMIC
    DECLARE VAR_MEMBER_NUM_ON_ADDRESS INTEGER;
    DECLARE VAR_VENDOR_NUM_ON_ADDRESS INTEGER;

    SET VAR_MEMBER_NUM_ON_ADDRESS = (SELECT COUNT(M.IDADDRESS)
                                     FROM MEMBER AS M
                                              INNER JOIN ADDRESS AS A ON M.IDADDRESS = A.ID
                                     WHERE M.IDADDRESS = P_IDADDRESS
                                     GROUP BY M.IDADDRESS);

    SET VAR_VENDOR_NUM_ON_ADDRESS = (SELECT COUNT(V.IDADDRESS)
                                     FROM VENDORADDRESS AS V
                                              INNER JOIN ADDRESS A on V.IDADDRESS = A.ID
                                     WHERE V.IDADDRESS = P_IDADDRESS
                                     GROUP BY V.IDADDRESS);

    IF VAR_MEMBER_NUM_ON_ADDRESS IS NULL THEN SET VAR_MEMBER_NUM_ON_ADDRESS = 0; END IF;
    IF VAR_VENDOR_NUM_ON_ADDRESS IS NULL THEN SET VAR_VENDOR_NUM_ON_ADDRESS = 0; END IF;


    RETURN (VAR_VENDOR_NUM_ON_ADDRESS + VAR_MEMBER_NUM_ON_ADDRESS);
END;

CREATE FUNCTION MEMB_ORDER_HIST(P_EMAIL CHAR(30))
    RETURNS
        TABLE
        (
            ORDERNO INTEGER,
            STATUS  CHAR(15),
            TOTAL   DECIMAL(9, 2)
        )
    RETURN
        SELECT ORDER.ORDERNO, ORDER.STATUS, BASKET.TOTALPRICE
        FROM MEMBER
                 INNER JOIN BASKET ON IDADDRESS = ID,
             ORDER
        WHERE MEMBER.EMAIL = P_EMAIL
          AND ORDER.ORDERNO IN (SELECT ORDERNO FROM BASKET WHERE ID = IDADDRESS);

CREATE FUNCTION MOST_UNEXP_PROD(P_CATEGORY CHAR(10))
    RETURNS TABLE
            (
                SKU      INTEGER,
                CATEGORY CHAR(10),
                PRICE    DECIMAL(9, 2)
            )
BEGIN
    ATOMIC

    DECLARE VAR_SKU INTEGER;
    DECLARE VAR_PRICE DECIMAL(9, 2);


    IF P_CATEGORY = 'book' THEN
        SET VAR_SKU = (SELECT SKU FROM BOOK WHERE PRICE = (SELECT DISTINCT MIN(PRICE) FROM BOOK));
        SET VAR_PRICE = (SELECT DISTINCT MIN(PRICE) FROM BOOK);

    ELSEIF P_CATEGORY = 'notebook' THEN
        SET VAR_SKU = (SELECT SKU FROM NOTEBOOK WHERE PRICE = (SELECT DISTINCT MIN(PRICE) FROM NOTEBOOK));
        SET VAR_PRICE = (SELECT DISTINCT MIN(PRICE) FROM NOTEBOOK);

    ELSEIF P_CATEGORY = 'pen' THEN
        SET VAR_SKU = (SELECT SKU FROM PEN WHERE PRICE = (SELECT DISTINCT MIN(PRICE) FROM PEN));
        SET VAR_PRICE = (SELECT DISTINCT MIN(PRICE) FROM PEN);

    ELSEIF P_CATEGORY = 'pencil' THEN
        SET VAR_SKU = (SELECT SKU FROM PENCIL WHERE PRICE = (SELECT DISTINCT MIN(PRICE) FROM PENCIL));
        SET VAR_PRICE = (SELECT DISTINCT MIN(PRICE) FROM PENCIL);
    END IF;

    RETURN VALUES (VAR_SKU, P_CATEGORY, VAR_PRICE);
END;

CREATE FUNCTION MOST_EXP_PROD(P_CATEGORY CHAR(10))
    RETURNS TABLE
            (
                SKU      INTEGER,
                CATEGORY CHAR(10),
                PRICE    DECIMAL(9, 2)
            )
BEGIN
    ATOMIC

    DECLARE VAR_SKU INTEGER;
    DECLARE VAR_PRICE DECIMAL(9, 2);

    IF P_CATEGORY = 'book' THEN
        SET VAR_SKU = (SELECT SKU FROM BOOK WHERE PRICE = (SELECT DISTINCT MAX(PRICE) FROM BOOK));
        SET VAR_PRICE = (SELECT DISTINCT MAX(PRICE) FROM BOOK);

    ELSEIF P_CATEGORY = 'notebook' THEN
        SET VAR_SKU = (SELECT SKU FROM NOTEBOOK WHERE PRICE = (SELECT DISTINCT MAX(PRICE) FROM NOTEBOOK));
        SET VAR_PRICE = (SELECT DISTINCT MAX(PRICE) FROM NOTEBOOK);

    ELSEIF P_CATEGORY = 'pen' THEN
        SET VAR_SKU = (SELECT SKU FROM PEN WHERE PRICE = (SELECT DISTINCT MAX(PRICE) FROM PEN));
        SET VAR_PRICE = (SELECT DISTINCT MAX(PRICE) FROM PEN);

    ELSEIF P_CATEGORY = 'pencil' THEN
        SET VAR_SKU = (SELECT SKU FROM PENCIL WHERE PRICE = (SELECT DISTINCT MAX(PRICE) FROM PENCIL));
        SET VAR_PRICE = (SELECT DISTINCT MAX(PRICE) FROM PENCIL);
    END IF;

    RETURN VALUES (VAR_SKU, P_CATEGORY, VAR_PRICE);
END;

CREATE FUNCTION GET_PROD_BY_COMPANY_NAME(COPMANY_NAME CHARACTER(15))
    RETURNS
        TABLE
        (
            SKU INTEGER
        )
BEGIN
    ATOMIC

    DECLARE VENDORIDF INTEGER;
    SET VENDORIDF = (SELECT ID FROM VENDOR WHERE COMPANYNAME = COPMANY_NAME);

    RETURN
        SELECT SKU
        FROM BOOK
        WHERE VENDORID = VENDORIDF

        UNION

        SELECT SKU
        FROM NOTEBOOK
        WHERE VENDORID = VENDORIDF

        UNION

        SELECT SKU
        FROM PEN
        WHERE VENDORID = VENDORIDF

        UNION

        SELECT SKU
        FROM PENCIL
        WHERE VENDORID = VENDORIDF;
END;

CREATE FUNCTION CHECK_PROD_IS_AVAL(P_SKU INTEGER)
    RETURNS INTEGER
BEGIN
    ATOMIC

    DECLARE QUANTITYBOOK INTEGER;
    DECLARE QUANTITYNOTEBOOK INTEGER;
    DECLARE QUANTITYPEN INTEGER;
    DECLARE QUANTITYPENCIL INTEGER;

    SET QUANTITYBOOK = (SELECT STORGQUANT FROM BOOK WHERE SKU = P_SKU);
    SET QUANTITYNOTEBOOK = (SELECT STORGQUANT FROM NOTEBOOK WHERE SKU = P_SKU);
    SET QUANTITYPEN = (SELECT STORGQUANT FROM PEN WHERE SKU = P_SKU);
    SET QUANTITYPENCIL = (SELECT STORGQUANT FROM PENCIL WHERE SKU = P_SKU);

    IF (QUANTITYBOOK > 0) THEN
        RETURN 1;
    ELSEIF (QUANTITYNOTEBOOK > 0) THEN
        RETURN 1;
    ELSEIF (QUANTITYPEN > 0) THEN
        RETURN 1;
    ELSEIF (QUANTITYPENCIL > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;

END;

CREATE FUNCTION AMT_MONEY_SPENT (P_EMAIL CHAR(30))
RETURNS INTEGER
RETURN
SELECT SUM(TOTALPRICE)
FROM BASKET
WHERE BASKET.EMAIL = P_EMAIL;

CREATE FUNCTION COUNT_ORD_BY_MEMBER (P_EMAIL CHAR(30))
RETURNS INTEGER
RETURN
SELECT COUNT(ORDER.ORDERNO)
FROM ORDER
WHERE ORDER.ORDERNO IN (SELECT DISTINCT ORDERNO FROM BASKET WHERE EMAIL = P_EMAIL);

CREATE FUNCTION IS_EXPIRED(P_CARDNO INTEGER)
RETURNS INTEGER
BEGIN ATOMIC
    DECLARE EXP_DATE DATE;
    DECLARE FLAG INTEGER;
    SET EXP_DATE = (SELECT CARDEXPIRED FROM PAYMENT WHERE CARDNO = P_CARDNO);
    IF EXP_DATE < CURRENT_DATE  THEN
        SET FLAG = 1;
    ELSE
        SET FLAG = 0;
    END IF;
RETURN FLAG;
END;

CREATE FUNCTION GET_PROD_BY_COMPANY_NAME(P_COMPANY_NAME CHARACTER(15))
    RETURNS
        TABLE
        (
            SKU INTEGER
        )
BEGIN
    ATOMIC

    DECLARE VENDORIDF INTEGER;
    SET VENDORIDF = (SELECT ID FROM VENDOR WHERE COMPANYNAME = P_COMPANY_NAME);

    RETURN
        SELECT SKU
        FROM BOOK
        WHERE VENDORID = VENDORIDF

        UNION

        SELECT SKU
        FROM NOTEBOOK
        WHERE VENDORID = VENDORIDF

        UNION

        SELECT SKU
        FROM PEN
        WHERE VENDORID = VENDORIDF

        UNION

        SELECT SKU
        FROM PENCIL
        WHERE VENDORID = VENDORIDF;
END;

CREATE FUNCTION GET_BOOKS_BY_AUTHOR (BOOK_AUTHOR CHARACTER(50))
 RETURNS
        TABLE
        (
            SKU INTEGER,
            TITLE CHARACTER(50),
            GENRE CHARACTER(10)
        )
BEGIN
    ATOMIC

    RETURN
       SELECT SKU, TITLE, GENRE
       FROM BOOK
       WHERE AUTHOR =  BOOK_AUTHOR;
end;

CREATE FUNCTION CHECK_BOOK_IS_AVAL_BY_TITLE(BOOK_TITLE CHARACTER(50))
 RETURNS INTEGER
BEGIN
    ATOMIC

    DECLARE RESULT INTEGER;

    SET RESULT = (SELECT STORGQUANT FROM BOOK WHERE TITLE = BOOK_TITLE);

    IF RESULT > 0 THEN RETURN 1;
    ELSE RETURN 0;
    END IF;
end;
