SET SCHEMA FN45439;

-- creating tables --

CREATE TABLE BOOK
(
    SKU        INTEGER  NOT NULL UNIQUE,
    BARCODE    CHAR(12) NOT NULL UNIQUE,
    PRICE      DECIMAL(9, 2),
    STORGQUANT INTEGER,
    CATEGORY   CHAR(10),
    VENDORID   INTEGER,
    GENRE      CHAR(10),
    TITLE      VARCHAR(50),
    AUTHOR     VARCHAR(50),
    LANGUAGE   VARCHAR(50),
    PUBLISHER  VARCHAR(50),
    NUMOFPAGES INTEGER
);

CREATE TABLE NOTEBOOK
(
    SKU         INTEGER  NOT NULL UNIQUE,
    BARCODE     CHAR(12) NOT NULL UNIQUE,
    PRICE       DECIMAL(9, 2),
    STORGQUANT  INTEGER,
    CATEGORY    CHAR(10),
    VENDORID    INTEGER,
    TYPE        VARCHAR(50),
    FORMAT      CHAR(3),
    RECYCLPAPER CHAR(1),
    NUMOFPAGES  INTEGER
);

CREATE TABLE PEN
(
    SKU        INTEGER  NOT NULL UNIQUE,
    BARCODE    CHAR(12) NOT NULL UNIQUE,
    PRICE      DECIMAL(9, 2),
    STORGQUANT INTEGER,
    CATEGORY   CHAR(10),
    VENDORID   INTEGER,
    SIZE       DECIMAL(9, 2),
    COLOUR     CHAR(10)
);

CREATE TABLE PENCIL
(
    SKU        INTEGER  NOT NULL UNIQUE,
    BARCODE    CHAR(12) NOT NULL UNIQUE,
    PRICE      DECIMAL(9, 2),
    STORGQUANT INTEGER,
    CATEGORY   CHAR(10),
    VENDORID   INTEGER,
    TYPE       CHAR(4),
    ERASER     CHAR(1),
    COLOUR     CHAR(10)
);

CREATE TABLE ALLSKU
(
    SKU INTEGER NOT NULL UNIQUE
);

CREATE TABLE ORDER
(
    ORDERNO CHAR(6) NOT NULL,
    STATUS  CHAR(15),
    CARDNO  INTEGER
);

CREATE TABLE ADDRESS
(
    ID            INTEGER  NOT NULL,
    COUNTRY       CHAR(20) NOT NULL,
    CITY          CHAR(20) NOT NULL,
    NEIGHBOURHOOD CHAR(20) NOT NULL,
    STREET        CHAR(20) NOT NULL,
    APARTMENTNO   INTEGER,
    POSTALCODE    INTEGER
);

CREATE TABLE PAYMENT
(
    CARDNO      INTEGER  NOT NULL,
    CARDTYPE    CHAR(20),
    CARDHOLDERN CHAR(30),
    CARDHOLDERS CHAR(30) NOT NULL,
    CARDEXPIRED DATE
);

CREATE TABLE MEMBER
(
    EMAIL     CHAR(30) NOT NULL UNIQUE,
    NAME      CHAR(30) NOT NULL,
    SURNAME   CHAR(30) NOT NULL,
    PASSWORD  CHAR(16) NOT NULL,
    IDADDRESS INTEGER
);

CREATE TABLE BASKET
(
    ID         INTEGER NOT NULL,
    TOTALPRICE DECIMAL(9, 2),
    ORDERNO    CHAR(6),
    CARDNO     INTEGER,
    EMAIL      CHARACTER(30),
    SKU        INTEGER,
    QUANTITY   INTEGER
);

CREATE TABLE VENDOR
(
    ID          INTEGER  NOT NULL,
    EMAIL       CHAR(40),
    FIRSTNAME   CHAR(12),
    LASTNAME    CHAR(12),
    PHONE       CHAR(10),
    COMPANYNAME CHAR(15) NOT NULL,
    URL         CHAR(32)
);

CREATE TABLE VENDORADDRESS
(
    ID        INTEGER NOT NULL,
    IDVENDOR  INTEGER,
    IDADDRESS INTEGER
);

-- setting keys and checks --

-- ADDRESS --
ALTER TABLE ADDRESS
    ADD CONSTRAINT PK_ADDRESS PRIMARY KEY (ID);

ALTER TABLE ADDRESS
    ADD CONSTRAINT CH_ID CHECK (ID > 0);

ALTER TABLE ADDRESS
    ADD CONSTRAINT CH_APARTAMENTNO CHECK (APARTMENTNO > 0);

ALTER TABLE ADDRESS
    ADD CONSTRAINT CH_POSTALCODE CHECK (POSTALCODE > 0);

-- VENDOR --
ALTER TABLE VENDOR
    ADD CONSTRAINT PK_VENDOR PRIMARY KEY (ID);

ALTER TABLE VENDOR
    ADD CONSTRAINT CH_EMAIL CHECK (EMAIL LIKE '%_@%_.%_');

-- VENDORADDRESS
ALTER TABLE VENDORADDRESS
    ADD CONSTRAINT PK_VENDORADDRESS PRIMARY KEY (ID);

ALTER TABLE VENDORADDRESS
    ADD CONSTRAINT FK_VENDORADDRESS_VENDOR FOREIGN KEY (IDVENDOR)
        REFERENCES VENDOR (ID);

ALTER TABLE VENDORADDRESS
    ADD CONSTRAINT FK_VENDORADDRESS_ADDRESS FOREIGN KEY (IDADDRESS)
        REFERENCES ADDRESS (ID);

-- BOOK --
ALTER TABLE BOOK
    ADD CONSTRAINT PK_BOOK PRIMARY KEY (SKU);

ALTER TABLE BOOK
    ADD CONSTRAINT FK_BOOK_VENDORID FOREIGN KEY (VENDORID)
        REFERENCES VENDOR (ID);

ALTER TABLE BOOK
    ADD CONSTRAINT CH_BARCODE CHECK (LENGTH(BARCODE) = 12);

ALTER TABLE BOOK
    ADD CONSTRAINT CH_CATEGORY CHECK (CATEGORY IN ('book'));

-- NOTEBOOK --
ALTER TABLE NOTEBOOK
    ADD CONSTRAINT PK_NOTEBOOK PRIMARY KEY (SKU);

ALTER TABLE NOTEBOOK
    ADD CONSTRAINT FK_NOTEBOOK_VENDOR_ID FOREIGN KEY (VENDORID)
        REFERENCES VENDOR (ID);

ALTER TABLE NOTEBOOK
    ADD CONSTRAINT CH_BARCODE CHECK (LENGTH(BARCODE) = 12);

ALTER TABLE NOTEBOOK
    ADD CONSTRAINT CH_CATEGORY CHECK (CATEGORY IN ('notebook'));

ALTER TABLE NOTEBOOK
    ADD CONSTRAINT CH_FORMAT CHECK (FORMAT IN ('A2', 'A3', 'A4', 'A5', 'A6'));

ALTER TABLE NOTEBOOK
    ADD CONSTRAINT CH_RECYCLPAPER CHECK (RECYCLPAPER IN ('y', 'n'));

-- PEN --
ALTER TABLE PEN
    ADD CONSTRAINT PK_PEN PRIMARY KEY (SKU);

ALTER TABLE PEN
    ADD CONSTRAINT FK_PEN_VENDOR_ID FOREIGN KEY (VENDORID)
        REFERENCES VENDOR (ID);

ALTER TABLE PEN
    ADD CONSTRAINT CH_BARCODE CHECK (LENGTH(BARCODE) = 12);

ALTER TABLE PEN
    ADD CONSTRAINT CH_CATEGORY CHECK (CATEGORY IN ('pen'));

-- PENCIL --
ALTER TABLE PENCIL
    ADD CONSTRAINT PK_PENCIL PRIMARY KEY (SKU);

ALTER TABLE PENCIL
    ADD CONSTRAINT FK_PENCIL_VENDOR_ID FOREIGN KEY (VENDORID)
        REFERENCES VENDOR (ID);

ALTER TABLE PENCIL
    ADD CONSTRAINT CH_BARCODE CHECK (LENGTH(BARCODE) = 12);

ALTER TABLE PENCIL
    ADD CONSTRAINT CH_CATEGORY CHECK (CATEGORY IN ('pencil'));

ALTER TABLE PENCIL
    ADD CONSTRAINT CH_ERASER CHECK (ERASER IN ('y', 'n'));

-- ALLSKU --
ALTER TABLE ALLSKU
    ADD CONSTRAINT PK_ALLSKU PRIMARY KEY (SKU);

-- PAYMENT --
ALTER TABLE PAYMENT
    ADD CONSTRAINT PK_PAYMENT PRIMARY KEY (CARDNO);

-- ORDER --
ALTER TABLE ORDER
    ADD CONSTRAINT PK_ORDER PRIMARY KEY (ORDERNO);

ALTER TABLE ORDER
    ADD CONSTRAINT FK_ORDER_PAYMENT FOREIGN KEY (CARDNO)
        REFERENCES PAYMENT (CARDNO);

-- MEMBER --
ALTER TABLE MEMBER
    ADD CONSTRAINT PK_MEMBER PRIMARY KEY (EMAIL);

ALTER TABLE MEMBER
    ADD CONSTRAINT FK_MEMBER_ADDRESS FOREIGN KEY (IDADDRESS)
        REFERENCES ADDRESS (ID);

ALTER TABLE MEMBER
    ADD CONSTRAINT CH_EMAIL CHECK (EMAIL LIKE '%_@%_.%_');

-- BASKET --
ALTER TABLE BASKET
    ADD CONSTRAINT PK_BASKET PRIMARY KEY (ID);

ALTER TABLE BASKET
    ADD CONSTRAINT FK_BASKET_ORDER FOREIGN KEY (ORDERNO)
        REFERENCES ORDER (ORDERNO);

ALTER TABLE BASKET
    ADD CONSTRAINT FK_BASKET_PAYMENT FOREIGN KEY (CARDNO)
        REFERENCES PAYMENT (CARDNO);

ALTER TABLE BASKET
    ADD CONSTRAINT FK_BASKET_PRODUCT FOREIGN KEY (SKU)
        REFERENCES ALLSKU (SKU);

ALTER TABLE BASKET
    ADD CONSTRAINT FK_BASKET_MEMBER FOREIGN KEY (EMAIL)
    REFERENCES MEMBER(EMAIL);

ALTER TABLE BASKET
    ADD CONSTRAINT CH_TOTALPRICE CHECK (TOTALPRICE > 0);

-- functions --

CREATE FUNCTION GET_PROD_INFO(P_SKU INTEGER)
    RETURNS TABLE
            (
                BARCODE     CHAR(12),
                CATEGORY    VARCHAR(100),
                SINGLEPRICE DECIMAL(9, 2)
            )
BEGIN
    ATOMIC

    DECLARE SKUBOOK INTEGER;
    DECLARE SKUNOTEBOOK INTEGER;
    DECLARE SKUPEN INTEGER;
    DECLARE SKUPENCIL INTEGER;

    DECLARE BARCODERES CHAR(12);
    DECLARE CATEGORYRES VARCHAR(100);
    DECLARE SINGLPRICERES DECIMAL(9, 2);

    SET SKUBOOK = (SELECT SKU FROM BOOK WHERE SKU = P_SKU);
    SET SKUNOTEBOOK = (SELECT SKU FROM NOTEBOOK WHERE SKU = P_SKU);
    SET SKUPEN = (SELECT SKU FROM PEN WHERE SKU = P_SKU);
    SET SKUPENCIL = (SELECT SKU FROM PENCIL WHERE SKU = P_SKU);

    IF SKUBOOK IS NOT NULL THEN
        SET BARCODERES = (SELECT BARCODE FROM BOOK WHERE SKU = P_SKU);
        SET CATEGORYRES = (SELECT CATEGORY FROM BOOK WHERE SKU = P_SKU);
        SET SINGLPRICERES = (SELECT PRICE FROM BOOK WHERE SKU = P_SKU);
    END IF;

    IF SKUNOTEBOOK IS NOT NULL THEN
        SET BARCODERES = (SELECT BARCODE FROM NOTEBOOK WHERE SKU = P_SKU);
        SET CATEGORYRES = (SELECT CATEGORY FROM NOTEBOOK WHERE SKU = P_SKU);
        SET SINGLPRICERES = (SELECT PRICE FROM NOTEBOOK WHERE SKU = P_SKU);
    END IF;

    IF SKUPEN IS NOT NULL THEN
        SET BARCODERES = (SELECT BARCODE FROM PEN WHERE SKU = P_SKU);
        SET CATEGORYRES = (SELECT CATEGORY FROM PEN WHERE SKU = P_SKU);
        SET SINGLPRICERES = (SELECT PRICE FROM PEN WHERE SKU = P_SKU);
    END IF;

    IF SKUPENCIL IS NOT NULL THEN
        SET BARCODERES = (SELECT BARCODE FROM PENCIL WHERE SKU = P_SKU);
        SET CATEGORYRES = (SELECT CATEGORY FROM PENCIL WHERE SKU = P_SKU);
        SET SINGLPRICERES = (SELECT PRICE FROM PENCIL WHERE SKU = P_SKU);
    END IF;

    RETURN VALUES (BARCODERES, CATEGORYRES, SINGLPRICERES);
END;

CREATE FUNCTION ORD_STAT_INFO(P_ORDNO CHARACTER(6))
    RETURNS VARCHAR(15)
BEGIN
    ATOMIC

    DECLARE ORDERNO CHARACTER(6);
    DECLARE STATUS VARCHAR(15);

    SET ORDERNO = (SELECT O.ORDERNO FROM ORDER AS O WHERE O.ORDERNO = P_ORDNO);

    IF ORDERNO IS NOT NULL THEN
        SET STATUS = (SELECT O.STATUS FROM ORDER AS O WHERE O.ORDERNO = P_ORDNO);
    END IF;

    IF ORDERNO IS NULL THEN
        SET STATUS = '#INEXIST';
    END IF;

    RETURN STATUS;
END;

CREATE FUNCTION IS_EMAIL_OCP(P_EMAIL CHARACTER(30))
    RETURNS INTEGER
BEGIN
    ATOMIC

    DECLARE VAR_EMAIL CHARACTER(30);

    SET VAR_EMAIL = (SELECT EMAIL FROM MEMBER WHERE EMAIL = P_EMAIL);

    IF VAR_EMAIL IS NULL THEN
        RETURN 0;
    ELSE
        RETURN 1;
    END IF;
END;

CREATE FUNCTION NUM_OF_PEOPLE(P_IDADDRESS INTEGER)
    RETURNS INTEGER
BEGIN
    ATOMIC
    DECLARE VAR_MEMBER_NUM_ON_ADDRESS INTEGER;
    DECLARE VAR_VENDOR_NUM_ON_ADDRESS INTEGER;

    SET VAR_MEMBER_NUM_ON_ADDRESS = (SELECT COUNT(M.IDADDRESS)
                                     FROM MEMBER AS M
                                              INNER JOIN ADDRESS AS A ON M.IDADDRESS = A.ID
                                     WHERE M.IDADDRESS = P_IDADDRESS
                                     GROUP BY M.IDADDRESS);

    SET VAR_VENDOR_NUM_ON_ADDRESS = (SELECT COUNT(V.IDADDRESS)
                                     FROM VENDORADDRESS AS V
                                              INNER JOIN ADDRESS A on V.IDADDRESS = A.ID
                                     WHERE V.IDADDRESS = P_IDADDRESS
                                     GROUP BY V.IDADDRESS);

    IF VAR_MEMBER_NUM_ON_ADDRESS IS NULL THEN SET VAR_MEMBER_NUM_ON_ADDRESS = 0; END IF;
    IF VAR_VENDOR_NUM_ON_ADDRESS IS NULL THEN SET VAR_VENDOR_NUM_ON_ADDRESS = 0; END IF;


    RETURN (VAR_VENDOR_NUM_ON_ADDRESS + VAR_MEMBER_NUM_ON_ADDRESS);
END;

CREATE FUNCTION MEMB_ORDER_HIST(P_EMAIL CHAR(30))
    RETURNS
        TABLE
        (
            ORDERNO INTEGER,
            STATUS  CHAR(15),
            TOTAL   DECIMAL(9, 2)
        )
    RETURN
        SELECT ORDER.ORDERNO, ORDER.STATUS, BASKET.TOTALPRICE
        FROM MEMBER
                 INNER JOIN BASKET ON IDADDRESS = ID,
             ORDER
        WHERE MEMBER.EMAIL = P_EMAIL
          AND ORDER.ORDERNO IN (SELECT ORDERNO FROM BASKET WHERE ID = IDADDRESS);

CREATE FUNCTION MOST_UNEXP_PROD(P_CATEGORY CHAR(10))
    RETURNS TABLE
            (
                SKU      INTEGER,
                CATEGORY CHAR(10),
                PRICE    DECIMAL(9, 2)
            )
BEGIN
    ATOMIC

    DECLARE VAR_SKU INTEGER;
    DECLARE VAR_PRICE DECIMAL(9, 2);


    IF P_CATEGORY = 'book' THEN
        SET VAR_SKU = (SELECT SKU FROM BOOK WHERE PRICE = (SELECT DISTINCT MIN(PRICE) FROM BOOK));
        SET VAR_PRICE = (SELECT DISTINCT MIN(PRICE) FROM BOOK);

    ELSEIF P_CATEGORY = 'notebook' THEN
        SET VAR_SKU = (SELECT SKU FROM NOTEBOOK WHERE PRICE = (SELECT DISTINCT MIN(PRICE) FROM NOTEBOOK));
        SET VAR_PRICE = (SELECT DISTINCT MIN(PRICE) FROM NOTEBOOK);

    ELSEIF P_CATEGORY = 'pen' THEN
        SET VAR_SKU = (SELECT SKU FROM PEN WHERE PRICE = (SELECT DISTINCT MIN(PRICE) FROM PEN));
        SET VAR_PRICE = (SELECT DISTINCT MIN(PRICE) FROM PEN);

    ELSEIF P_CATEGORY = 'pencil' THEN
        SET VAR_SKU = (SELECT SKU FROM PENCIL WHERE PRICE = (SELECT DISTINCT MIN(PRICE) FROM PENCIL));
        SET VAR_PRICE = (SELECT DISTINCT MIN(PRICE) FROM PENCIL);
    END IF;

    RETURN VALUES (VAR_SKU, P_CATEGORY, VAR_PRICE);
END;

CREATE FUNCTION MOST_EXP_PROD(P_CATEGORY CHAR(10))
    RETURNS TABLE
            (
                SKU      INTEGER,
                CATEGORY CHAR(10),
                PRICE    DECIMAL(9, 2)
            )
BEGIN
    ATOMIC

    DECLARE VAR_SKU INTEGER;
    DECLARE VAR_PRICE DECIMAL(9, 2);

    IF P_CATEGORY = 'book' THEN
        SET VAR_SKU = (SELECT SKU FROM BOOK WHERE PRICE = (SELECT DISTINCT MAX(PRICE) FROM BOOK));
        SET VAR_PRICE = (SELECT DISTINCT MAX(PRICE) FROM BOOK);

    ELSEIF P_CATEGORY = 'notebook' THEN
        SET VAR_SKU = (SELECT SKU FROM NOTEBOOK WHERE PRICE = (SELECT DISTINCT MAX(PRICE) FROM NOTEBOOK));
        SET VAR_PRICE = (SELECT DISTINCT MAX(PRICE) FROM NOTEBOOK);

    ELSEIF P_CATEGORY = 'pen' THEN
        SET VAR_SKU = (SELECT SKU FROM PEN WHERE PRICE = (SELECT DISTINCT MAX(PRICE) FROM PEN));
        SET VAR_PRICE = (SELECT DISTINCT MAX(PRICE) FROM PEN);

    ELSEIF P_CATEGORY = 'pencil' THEN
        SET VAR_SKU = (SELECT SKU FROM PENCIL WHERE PRICE = (SELECT DISTINCT MAX(PRICE) FROM PENCIL));
        SET VAR_PRICE = (SELECT DISTINCT MAX(PRICE) FROM PENCIL);
    END IF;

    RETURN VALUES (VAR_SKU, P_CATEGORY, VAR_PRICE);
END;

CREATE FUNCTION CHECK_PROD_IS_AVAL(P_SKU INTEGER)
    RETURNS INTEGER
BEGIN
    ATOMIC

    DECLARE QUANTITYBOOK INTEGER;
    DECLARE QUANTITYNOTEBOOK INTEGER;
    DECLARE QUANTITYPEN INTEGER;
    DECLARE QUANTITYPENCIL INTEGER;

    SET QUANTITYBOOK = (SELECT STORGQUANT FROM BOOK WHERE SKU = P_SKU);
    SET QUANTITYNOTEBOOK = (SELECT STORGQUANT FROM NOTEBOOK WHERE SKU = P_SKU);
    SET QUANTITYPEN = (SELECT STORGQUANT FROM PEN WHERE SKU = P_SKU);
    SET QUANTITYPENCIL = (SELECT STORGQUANT FROM PENCIL WHERE SKU = P_SKU);

    IF (QUANTITYBOOK > 0) THEN
        RETURN 1;
    ELSEIF (QUANTITYNOTEBOOK > 0) THEN
        RETURN 1;
    ELSEIF (QUANTITYPEN > 0) THEN
        RETURN 1;
    ELSEIF (QUANTITYPENCIL > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;

END;

CREATE FUNCTION AMT_MONEY_SPENT (P_EMAIL CHAR(30))
RETURNS INTEGER
RETURN
SELECT SUM(TOTALPRICE)
FROM BASKET
WHERE BASKET.EMAIL = P_EMAIL;

CREATE FUNCTION COUNT_ORD_BY_MEMBER (P_EMAIL CHAR(30))
RETURNS INTEGER
RETURN
SELECT COUNT(ORDER.ORDERNO)
FROM ORDER
WHERE ORDER.ORDERNO IN (SELECT DISTINCT ORDERNO FROM BASKET WHERE EMAIL = P_EMAIL);

CREATE FUNCTION IS_EXPIRED(P_CARDNO INTEGER)
RETURNS INTEGER
BEGIN ATOMIC
    DECLARE EXP_DATE DATE;
    DECLARE FLAG INTEGER;
    SET EXP_DATE = (SELECT CARDEXPIRED FROM PAYMENT WHERE CARDNO = P_CARDNO);
    IF EXP_DATE < CURRENT_DATE  THEN
        SET FLAG = 1;
    ELSE
        SET FLAG = 0;
    END IF;
RETURN FLAG;
END;

CREATE FUNCTION GET_PROD_BY_COMPANY_NAME(P_COMPANY_NAME CHARACTER(15))
    RETURNS
        TABLE
        (
            SKU INTEGER
        )
BEGIN
    ATOMIC

    DECLARE VENDORIDF INTEGER;
    SET VENDORIDF = (SELECT ID FROM VENDOR WHERE COMPANYNAME = P_COMPANY_NAME);

    RETURN
        SELECT SKU
        FROM BOOK
        WHERE VENDORID = VENDORIDF

        UNION

        SELECT SKU
        FROM NOTEBOOK
        WHERE VENDORID = VENDORIDF

        UNION

        SELECT SKU
        FROM PEN
        WHERE VENDORID = VENDORIDF

        UNION

        SELECT SKU
        FROM PENCIL
        WHERE VENDORID = VENDORIDF;
END;

CREATE FUNCTION GET_BOOKS_BY_AUTHOR (BOOK_AUTHOR CHARACTER(50))
 RETURNS
        TABLE
        (
            SKU INTEGER,
            TITLE CHARACTER(50),
            GENRE CHARACTER(10)
        )
BEGIN
    ATOMIC

    RETURN
       SELECT SKU, TITLE, GENRE
       FROM BOOK
       WHERE AUTHOR =  BOOK_AUTHOR;
END;

CREATE FUNCTION CHECK_BOOK_IS_AVAL_BY_TITLE(BOOK_TITLE CHARACTER(50))
 RETURNS INTEGER
BEGIN
    ATOMIC

    DECLARE RESULT INTEGER;

    SET RESULT = (SELECT STORGQUANT FROM BOOK WHERE TITLE = BOOK_TITLE);

    IF RESULT > 0 THEN RETURN 1;
    ELSE RETURN 0;
    END IF;
END;

-- views --

CREATE VIEW V_BOOK_GENRE_COMEDY
AS
SELECT *
FROM BOOK
WHERE GENRE = 'comedy';

CREATE VIEW V_BOOK_GENRE_DRAMA
AS
SELECT *
FROM BOOK
WHERE GENRE = 'drama';

CREATE VIEW V_BOOK_GENRE_THRILLER
AS
SELECT *
FROM BOOK
WHERE GENRE = 'thriller';

CREATE VIEW V_BOOK_GENRE_FANTASY
AS
SELECT *
FROM BOOK
WHERE GENRE = 'fantasy';

CREATE VIEW V_ORDER_PRODUCTS_INFO
AS
SELECT O.ORDERNO,
       T.BARCODE,
       T.CATEGORY,
       T.SINGLEPRICE,
       B.TOTALPRICE,
       B.QUANTITY
FROM ORDER AS O
         INNER JOIN BASKET B on O.ORDERNO = B.ORDERNO,
     TABLE(FN45419.GET_PROD_INFO(B.SKU)) AS T;

CREATE VIEW V_ALL_PROD_SKU_CATEGORY
AS
SELECT SKU, CATEGORY
FROM BOOK

UNION
SELECT SKU, CATEGORY
FROM NOTEBOOK

UNION
SELECT SKU, CATEGORY
FROM PEN

UNION
SELECT SKU, CATEGORY
FROM PENCIL;

CREATE VIEW V_MEMBER_INFO (EMAIL, FIRSTNAME, SURNAME, NUM_ORDERS, TOTAL_AMT_SPENT)
AS
SELECT MEMBER.EMAIL, MEMBER.NAME, MEMBER.SURNAME, FN45419.COUNT_ORD_BY_MEMBER(MEMBER.EMAIL), FN45419.AMT_MONEY_SPENT(MEMBER.EMAIL)
    FROM MEMBER
    GROUP BY (MEMBER.EMAIL, MEMBER.NAME, MEMBER.SURNAME);

CREATE VIEW V_NUM_BOOKS_PER_GENRE(GENRE, NUMBER_PER_GENRE) AS
SELECT GENRE, COUNT(*)
FROM BOOK
GROUP BY (GENRE);

CREATE VIEW V_NUM_BOOKS_PER_VENDOR(VENDORID, NUMBER_PER_VENDOR) AS
SELECT VENDORID, COUNT(*)
FROM BOOK
GROUP BY (VENDORID);

CREATE VIEW V_MOST_COMMON_VENDOR_INFO(ID, EMAIL, FIRSTNAME, LASTNAME, PHONE, COMPANY, URL) AS
    SELECT*
        FROM VENDOR
        WHERE VENDOR.ID IN (SELECT VENDORID FROM V_NUM_BOOKS_PER_VENDOR WHERE NUMBER_PER_VENDOR = (SELECT MAX(NUMBER_PER_VENDOR)
                                                                                                FROM V_NUM_BOOKS_PER_VENDOR));

CREATE VIEW V_LEAST_COMMON_VENDOR_INFO(ID, EMAIL, FIRSTNAME, LASTNAME, PHONE, COMPANY, URL) AS
    SELECT*
        FROM VENDOR
        WHERE VENDOR.ID IN (SELECT VENDORID FROM V_NUM_BOOKS_PER_VENDOR WHERE NUMBER_PER_VENDOR = (SELECT MIN(NUMBER_PER_VENDOR)
                                                                                                FROM V_NUM_BOOKS_PER_VENDOR));

CREATE VIEW V_VENDOR_FOR_CLIENT_VIEW(EMAIL, FIRSTNAME, LASTNAME, PHONE, COMPANYNAME) AS
    SELECT EMAIL, FIRSTNAME, LASTNAME, PHONE, COMPANYNAME
        FROM VENDOR;

CREATE VIEW V_BOOK_GENRE_ACTION
AS
SELECT *
FROM BOOK
WHERE GENRE = 'action';

CREATE VIEW V_BOOK_GENRE_ADVENTURE
AS
SELECT *
FROM BOOK
WHERE GENRE = 'adventure';

CREATE VIEW V_BOOK_GENRE_HORROR
AS
SELECT *
FROM BOOK
WHERE GENRE = 'horror';

-- triggers --

-- BOOK --
CREATE TRIGGER AINS_BOOK
    AFTER INSERT
    ON BOOK
    REFERENCING NEW AS N
    FOR EACH ROW
    INSERT INTO ALLSKU
    VALUES (N.SKU);

CREATE TRIGGER AUPD_BOOK
    AFTER UPDATE OF SKU
    ON BOOK
    REFERENCING OLD AS O NEW AS N
    FOR EACH ROW
    UPDATE ALLSKU AS ALSK
    SET ALSK.SKU = N.SKU
    WHERE SKU = N.SKU;

CREATE TRIGGER ADEL_BOOK
    AFTER DELETE
    ON BOOK
    REFERENCING OLD AS O
    FOR EACH ROW
    DELETE
    FROM ALLSKU AS ALSK
    WHERE SKU = O.SKU;

CREATE TRIGGER UPDATE_PROD_QUANTITY_BOOK
    AFTER UPDATE OF STORGQUANT
    ON BOOK
    REFERENCING NEW AS N
    FOR EACH ROW
    WHEN (N.STORGQUANT = 0)
    UPDATE BOOK
    SET STORGQUANT = 9
    WHERE SKU = N.SKU;

-- NOTEBOOK --
CREATE TRIGGER AINS_NOTEBOOK
    AFTER INSERT
    ON NOTEBOOK
    REFERENCING NEW AS N
    FOR EACH ROW
    INSERT INTO ALLSKU
    VALUES (N.SKU);

CREATE TRIGGER AUPD_NOTEBOOK
    AFTER UPDATE OF SKU
    ON NOTEBOOK
    REFERENCING OLD AS O NEW AS N
    FOR EACH ROW
    UPDATE ALLSKU AS ALSK
    SET ALSK.SKU = N.SKU
    WHERE SKU = N.SKU;

CREATE TRIGGER ADEL_NOTEBOOK
    AFTER DELETE
    ON NOTEBOOK
    REFERENCING OLD AS O
    FOR EACH ROW
    DELETE
    FROM ALLSKU AS ALSK
    WHERE SKU = O.SKU;

CREATE TRIGGER UPDATE_PROD_QUANTITY_NOTEBOOK
    AFTER UPDATE OF STORGQUANT
    ON NOTEBOOK
    REFERENCING NEW AS N
    FOR EACH ROW
    WHEN (N.STORGQUANT = 0)
    UPDATE NOTEBOOK
    SET STORGQUANT = 9
    WHERE SKU = N.SKU;

-- PEN --
CREATE TRIGGER AINS_PEN
    AFTER INSERT
    ON PEN
    REFERENCING NEW AS N
    FOR EACH ROW
    INSERT INTO ALLSKU
    VALUES (N.SKU);

CREATE TRIGGER AUPD_PEN
    AFTER UPDATE OF SKU
    ON PEN
    REFERENCING OLD AS O NEW AS N
    FOR EACH ROW
    UPDATE ALLSKU AS ALSK
    SET ALSK.SKU = N.SKU
    WHERE SKU = N.SKU;

CREATE TRIGGER ADEL_PEN
    AFTER DELETE
    ON PEN
    REFERENCING OLD AS O
    FOR EACH ROW
    DELETE
    FROM ALLSKU AS ALSK
    WHERE SKU = O.SKU;

CREATE TRIGGER UPDATE_PROD_QUANTITY_PEN
    AFTER UPDATE OF STORGQUANT
    ON PEN
    REFERENCING NEW AS N
    FOR EACH ROW
    WHEN (N.STORGQUANT = 0)
    UPDATE PEN
    SET STORGQUANT = 9
    WHERE SKU = N.SKU;

-- PENCIL --
CREATE TRIGGER AINS_PENCIL
    AFTER INSERT
    ON PENCIL
    REFERENCING NEW AS N
    FOR EACH ROW
    INSERT INTO ALLSKU
    VALUES (N.SKU);

CREATE TRIGGER AUPD_PENCIL
    AFTER UPDATE OF SKU
    ON PENCIL
    REFERENCING OLD AS O NEW AS N
    FOR EACH ROW
    UPDATE ALLSKU AS ALSK
    SET ALSK.SKU = N.SKU
    WHERE SKU = N.SKU;

CREATE TRIGGER ADEL_PENCIL
    AFTER DELETE
    ON PENCIL
    REFERENCING OLD AS O
    FOR EACH ROW
    DELETE
    FROM ALLSKU AS ALSK
    WHERE SKU = O.SKU;

CREATE TRIGGER UPDATE_PROD_QUANTITY_PENCIL
    AFTER UPDATE OF STORGQUANT
    ON PENCIL
    REFERENCING NEW AS N
    FOR EACH ROW
    WHEN (N.STORGQUANT = 0)
    UPDATE PENCIL
    SET STORGQUANT = 9
    WHERE SKU = N.SKU;

-- MEMBER --
CREATE TRIGGER ADEL_MEMBER
    AFTER DELETE
    ON MEMBER
    REFERENCING OLD AS O
    FOR EACH ROW
BEGIN
    ATOMIC
    DECLARE VAR_PEOPLE_ON_ADDRESS INTEGER;

    SET VAR_PEOPLE_ON_ADDRESS = FN45419.NUM_OF_PEOPLE(O.IDADDRESS);


    IF VAR_PEOPLE_ON_ADDRESS = 0 THEN
        DELETE
        FROM ADDRESS AS A
        WHERE A.ID = O.IDADDRESS;
    END IF;
END;

-- VENDOR --
CREATE TRIGGER ADEL_VENDOR
    AFTER DELETE
    ON VENDOR
    REFERENCING OLD AS O
    FOR EACH ROW
BEGIN
    ATOMIC
    DECLARE VAR_VENDOR_IDADDRESS INTEGER;
    DECLARE VAR_PEOPLE_ON_ADDRESS INTEGER;

    SET VAR_VENDOR_IDADDRESS = (SELECT IDADDRESS FROM VENDORADDRESS WHERE IDVENDOR = O.ID);
    SET VAR_PEOPLE_ON_ADDRESS = FN45419.NUM_OF_PEOPLE(VAR_VENDOR_IDADDRESS);

    IF VAR_PEOPLE_ON_ADDRESS = 0 THEN
        DELETE
        FROM ADDRESS AS A
        WHERE A.ID = VAR_VENDOR_IDADDRESS;
    END IF;
END;

-- inserts --

-- ADDRESS --
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (1, 'Burkina Faso', 'Kaya', 'Mallory', 'Monument', 87, 8516);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (2, 'China', 'Zhaobei', 'Fisk', 'Sunbrook', 9, 3600);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (3, 'Czech Republic', 'Zásmuky', 'Vera', 'Kings', 94, 9084);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (4, 'France', 'Suresnes', 'Algoma', 'Leroy', 59, 8123);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (5, 'Indonesia', 'Bomomani', 'Chive', 'Hayes', 30, 8786);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (6, 'Portugal', 'Casal', 'David', 'Leroy', 73, 1861);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (7, 'Philippines', 'Agdangan', 'Kingsford', 'Laurel', 38, 2452);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (8, 'China', 'Qiaobian', 'Lunder', 'Stuart', 65, 8614);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (9, 'China', 'Erling', 'Monument', 'Oak', 2, 7019);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (10, 'China', 'Huichang', 'Artisan', 'Eastlawn', 61, 4027);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (11, 'Indonesia', 'Cihaurbeuti', 'Orin', 'Hintze', 26, 3047);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (12, 'Finland', 'Virojoki', 'Myrtle', 'Ruskin', 80, 7638);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (13, 'Indonesia', 'Sambirobyong', 'Hagan', 'Homewood', 99, 3829);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (14, 'China', 'Xingshou', 'Heath', '2nd', 58, 8018);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (15, 'Philippines', 'Bato', '4th', 'Kinsman', 64, 7254);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (16, 'Sweden', 'Borlänge', 'Homewood', 'Atwood', 76, 5467);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (17, 'Philippines', 'Bagroy', 'Shopko', 'Randy', 51, 5561);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (18, 'Croatia', 'Soljani', 'Meadow Valley', 'Rowland', 45, 4957);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (19, 'China', 'Shadui', 'International', 'Maple', 33, 1044);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (20, 'Sweden', 'Haninge', 'Mcguire', 'Waxwing', 52, 7811);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (21, 'North Korea', 'Sunan', 'Dorton', 'Amoth', 97, 9325);
insert into ADDRESS (ID, COUNTRY, CITY, NEIGHBOURHOOD, STREET, APARTMENTNO, POSTALCODE) values (22, 'Indonesia', 'Kokop', 'Golf Course', 'Boyd', 18, 4901);

-- VENDOR --
insert into VENDOR (ID, FIRSTNAME, LASTNAME, EMAIL, PHONE, COMPANYNAME, URL) values (1, 'Stacey', 'Ducroe', 'stacey.ducroe@booking.com', '1095811650', 'Flashpoint', 'https://nyu.edu');
insert into VENDOR (ID, FIRSTNAME, LASTNAME, EMAIL, PHONE, COMPANYNAME, URL) values (2, 'Melisent', 'Yokel', 'melisent.yokel@posterous.com', '2248593602', 'Photobug', 'https://harvard.edu');
insert into VENDOR (ID, FIRSTNAME, LASTNAME, EMAIL, PHONE, COMPANYNAME, URL) values (3, 'Graehme', 'Dyott', 'graehme.dyott@mayoclinic.com', '3125157202', 'Geba', 'https://bloglovin.com');
insert into VENDOR (ID, FIRSTNAME, LASTNAME, EMAIL, PHONE, COMPANYNAME, URL) values (4, 'Fayre', 'Neaves', 'fayre.neaves@google.it', '1379764494', 'Brainlounge', 'http://java.com');
insert into VENDOR (ID, FIRSTNAME, LASTNAME, EMAIL, PHONE, COMPANYNAME, URL) values (5, 'Kari', 'Seaman', 'kari.seaman@hhs.gov', '9508548768', 'Eabox', 'https://aboutads.info');
insert into VENDOR (ID, FIRSTNAME, LASTNAME, EMAIL, PHONE, COMPANYNAME, URL) values (6, 'Daveen', 'Cawsy', 'daveen.cawsy@yolasite.com', '1515985383', 'Layo', 'https://zimbio.com');
insert into VENDOR (ID, FIRSTNAME, LASTNAME, EMAIL, PHONE, COMPANYNAME, URL) values (7, 'Brien', 'Kilmartin', 'brien.kilmartin@163.com', '7108191821', 'Eidel', 'https://edublogs.org');
insert into VENDOR (ID, FIRSTNAME, LASTNAME, EMAIL, PHONE, COMPANYNAME, URL) values (8, 'Uri', 'Adamo', 'uri.adamo@squidoo.com', '7047678729', 'Janyx', 'https://twitter.com');
insert into VENDOR (ID, FIRSTNAME, LASTNAME, EMAIL, PHONE, COMPANYNAME, URL) values (9, 'Matt', 'Kundt', 'matt.kundt@printfriendly.com', '6448554533', 'Kwilith', 'http://springer.com');
insert into VENDOR (ID, FIRSTNAME, LASTNAME, EMAIL, PHONE, COMPANYNAME, URL) values (10, 'Nelle', 'Sherrock', 'nelle.sherrock@usda.gov', '5427599780', 'InnoZ', 'http://ted.com');
insert into VENDOR (ID, FIRSTNAME, LASTNAME, EMAIL, PHONE, COMPANYNAME, URL) values (11, 'Nichole', 'Sokill', 'nichole.sokill@google.ca', '6079296805', 'Trupe', 'http://dell.com');

-- VENDORADDRESS --
insert into VENDORADDRESS (ID, IDVENDOR, IDADDRESS) values (1,  10, 21);
insert into VENDORADDRESS (ID, IDVENDOR, IDADDRESS) values (2,  3,  18);
insert into VENDORADDRESS (ID, IDVENDOR, IDADDRESS) values (3,  11, 16);
insert into VENDORADDRESS (ID, IDVENDOR, IDADDRESS) values (4,  8,  15);
insert into VENDORADDRESS (ID, IDVENDOR, IDADDRESS) values (5,  1,  12);
insert into VENDORADDRESS (ID, IDVENDOR, IDADDRESS) values (6,  4,  11);
insert into VENDORADDRESS (ID, IDVENDOR, IDADDRESS) values (7,  2,  10);
insert into VENDORADDRESS (ID, IDVENDOR, IDADDRESS) values (8,  5,  8);
insert into VENDORADDRESS (ID, IDVENDOR, IDADDRESS) values (9,  6,  5);
insert into VENDORADDRESS (ID, IDVENDOR, IDADDRESS) values (10, 7,  4);
insert into VENDORADDRESS (ID, IDVENDOR, IDADDRESS) values (11, 9,  2);

-- MEMBER --
INSERT INTO MEMBER (NAME, SURNAME, EMAIL, PASSWORD, IDADDRESS) VALUES ('Camélia', 'Pevreal', 'camélia.pevreal@hud.gov', 'rVh0Jo', 20);
INSERT INTO MEMBER (NAME, SURNAME, EMAIL, PASSWORD, IDADDRESS) VALUES ('Aloïs', 'Mahmood', 'aloïs.mahmood@salon.com', 'bpaEpTEJMQ', 10);
INSERT INTO MEMBER (NAME, SURNAME, EMAIL, PASSWORD, IDADDRESS) VALUES ('Mélanie', 'Tolland', 'mélanie.tolland@google.com', 'dsF9FK9', 10);
INSERT INTO MEMBER (NAME, SURNAME, EMAIL, PASSWORD, IDADDRESS) VALUES ('Maïly', 'Powlesland', 'maïly.powlesland@yahoo.com', 'shAIXDW7', 6);
INSERT INTO MEMBER (NAME, SURNAME, EMAIL, PASSWORD, IDADDRESS) VALUES ('Illustrée', 'Barehead', 'illustrée.barehead@1688.com', 'pO4aCpGd', 18);
INSERT INTO MEMBER (NAME, SURNAME, EMAIL, PASSWORD, IDADDRESS) VALUES ('Bérénice', 'Roselli', 'bérénice.roselli@webs.com', 'caHe6hOwG9', 13);
INSERT INTO MEMBER (NAME, SURNAME, EMAIL, PASSWORD, IDADDRESS) VALUES ('Lài', 'Stores', 'lài.stores@i2i.jp', 'p4ghLwaUFtm', 19);
INSERT INTO MEMBER (NAME, SURNAME, EMAIL, PASSWORD, IDADDRESS) VALUES ('Félicie', 'Chicco', 'félicie.chicco@123-reg.co.uk', 'fZyxDa', 15);
INSERT INTO MEMBER (NAME, SURNAME, EMAIL, PASSWORD, IDADDRESS) VALUES ('Réjane', 'Aprahamian', 'réjane.aprahamian@tamu.edu', 'jnci6vlS', 9);
INSERT INTO MEMBER (NAME, SURNAME, EMAIL, PASSWORD, IDADDRESS) VALUES ('Inès', 'Jezzard', 'inès.jezzard@live.com', 'NKOIc1QNH', 14);
INSERT INTO MEMBER (NAME, SURNAME, EMAIL, PASSWORD, IDADDRESS) VALUES ('Adélie', 'Abram', 'adélie.abram@usda.gov', 'lnFkOd1s', 12);

-- PAYMENT --
insert into PAYMENT (CARDNO, CARDTYPE, CARDHOLDERN, CARDHOLDERS, CARDEXPIRED) values ('3538', 'jcb', 'Camélia', 'Pevreal', '2020-12-23');
insert into PAYMENT (CARDNO, CARDTYPE, CARDHOLDERN, CARDHOLDERS, CARDEXPIRED) values ('401', 'visa','Aloïs', 'Mahmood','2020-11-15');
insert into PAYMENT (CARDNO, CARDTYPE, CARDHOLDERN, CARDHOLDERS, CARDEXPIRED) values ('356', 'jcb','Mélanie', 'Tolland', '2021-09-15');
insert into PAYMENT (CARDNO, CARDTYPE, CARDHOLDERN, CARDHOLDERS, CARDEXPIRED) values ('3528', 'jcb', 'Maïly', 'Powlesland', '2025-06-30');
insert into PAYMENT (CARDNO, CARDTYPE, CARDHOLDERN, CARDHOLDERS, CARDEXPIRED) values ('35684', 'jcb', 'Illustrée', 'Barehead', '2022-10-20');
insert into PAYMENT (CARDNO, CARDTYPE, CARDHOLDERN, CARDHOLDERS, CARDEXPIRED) values ('51087534', 'mastercard','Bérénice', 'Roselli', '2026-10-21');
insert into PAYMENT (CARDNO, CARDTYPE, CARDHOLDERN, CARDHOLDERS, CARDEXPIRED) values ('35781345', 'jcb', 'Lài', 'Stores','2021-11-09');
insert into PAYMENT (CARDNO, CARDTYPE, CARDHOLDERN, CARDHOLDERS, CARDEXPIRED) values ('35762492', 'jcb',  'Félicie', 'Chicco', '2022-04-02');
insert into PAYMENT (CARDNO, CARDTYPE, CARDHOLDERN, CARDHOLDERS, CARDEXPIRED) values ('5602', 'bankcard', 'Réjane', 'Aprahamian', '2021-01-14');
insert into PAYMENT (CARDNO, CARDTYPE, CARDHOLDERN, CARDHOLDERS, CARDEXPIRED) values ('49038', 'switch', 'Inès', 'Jezzard', '2020-09-18');
insert into PAYMENT (CARDNO, CARDTYPE, CARDHOLDERN, CARDHOLDERS, CARDEXPIRED) values ('354261', 'jcb', 'Adélie', 'Abram', '2023-05-14');

-- ORDER --
insert into ORDER (ORDERNO, STATUS, CARDNO) values ('1','ACCEPTED' , 3538);
insert into ORDER (ORDERNO, STATUS, CARDNO) values ('2','UNACCEPETED', 3538);
insert into ORDER (ORDERNO, STATUS, CARDNO) values ('3', 'UNACCEPETED', 356);
insert into ORDER (ORDERNO, STATUS, CARDNO) values ('4', 'ACCEPTED', 35684);
insert into ORDER (ORDERNO, STATUS, CARDNO) values ('5', 'ACCEPTED',51087534);
insert into ORDER (ORDERNO,  STATUS, CARDNO) values ('6', 'ACCEPTED', 35781345);
insert into ORDER (ORDERNO,  STATUS, CARDNO) values ('7', 'UNACCEPETED', 5602);
insert into ORDER (ORDERNO,  STATUS, CARDNO) values ('8', 'ACCEPTED', 354261);
insert into ORDER (ORDERNO,  STATUS, CARDNO) values ('9', 'UNACCEPETED', 35762492);

-- BOOK --
insert into BOOK (SKU, BARCODE, PRICE, STORGQUANT, VENDORID, CATEGORY, GENRE, TITLE, AUTHOR, LANGUAGE, PUBLISHER, NUMOFPAGES) values (100754, '137988489424', 20.14, 23, 8, 'book', 'action', 'Two Rabbits (2 Coelhos)', 'Edouard Lefley', 'New Zealand Sign Language', 'Strayer Education, Inc.', 135);
insert into BOOK (SKU, BARCODE, PRICE, STORGQUANT, VENDORID, CATEGORY, GENRE, TITLE, AUTHOR, LANGUAGE, PUBLISHER, NUMOFPAGES) values (100689, '152268925439', 15, 14, 3, 'book', 'adventure', 'Johnny Tremain', 'Sheffie Trinke', 'Quechua', 'First Trust Eurozone AlphaDEX ETF', 158);
insert into BOOK (SKU, BARCODE, PRICE, STORGQUANT, VENDORID, CATEGORY, GENRE, TITLE, AUTHOR, LANGUAGE, PUBLISHER, NUMOFPAGES) values (100182, '143009825483', 4.6, 54, 6, 'book', 'drama', 'King''s Speech, The', 'Jdavie Prestner', 'Armenian', 'Penn Virginia Corporation', 117);
insert into BOOK (SKU, BARCODE, PRICE, STORGQUANT, VENDORID, CATEGORY, GENRE, TITLE, AUTHOR, LANGUAGE, PUBLISHER, NUMOFPAGES) values (100119, '165160247408', 16.48, 29, 9, 'book', 'comedy', 'Baxter, The', 'Ware Antonetti', 'Latvian', 'Check-Cap Ltd.', 132);
insert into BOOK (SKU, BARCODE, PRICE, STORGQUANT, VENDORID, CATEGORY, GENRE, TITLE, AUTHOR, LANGUAGE, PUBLISHER, NUMOFPAGES) values (100150, '112008339013', 10.37, 49, 7, 'book', 'drama', 'Cronos', 'Briant Phipps', 'Yiddish', 'Advanced Emissions Solutions, Inc.', 140);
insert into BOOK (SKU, BARCODE, PRICE, STORGQUANT, VENDORID, CATEGORY, GENRE, TITLE, AUTHOR, LANGUAGE, PUBLISHER, NUMOFPAGES) values (100295, '105797675530', 5.69, 22, 5, 'book', 'horror', 'Alien', 'Claudius McKinnon', 'Sotho', 'Regal Entertainment Group', 116);
insert into BOOK (SKU, BARCODE, PRICE, STORGQUANT, VENDORID, CATEGORY, GENRE, TITLE, AUTHOR, LANGUAGE, PUBLISHER, NUMOFPAGES) values (100229, '114506554252', 24.03, 32, 7, 'book', 'thriller', 'American Yakuza', 'Stanleigh Sentinella', 'Malay', 'iShares MSCI New Zealand Capped ETF', 183);
insert into BOOK (SKU, BARCODE, PRICE, STORGQUANT, VENDORID, CATEGORY, GENRE, TITLE, AUTHOR, LANGUAGE, PUBLISHER, NUMOFPAGES) values (100181, '198997663681', 4.49, 91, 8, 'book', 'thriller', 'Passion of Darkly Noon, The', 'Gaile Judkin', 'Bulgarian', 'Origin Agritech Limited', 119);
insert into BOOK (SKU, BARCODE, PRICE, STORGQUANT, VENDORID, CATEGORY, GENRE, TITLE, AUTHOR, LANGUAGE, PUBLISHER, NUMOFPAGES) values (100873, '113179458863', 11, 32, 11, 'book', 'fantasy', 'Dollman vs. Demonic Toys', 'Kip Harg', 'Latvian', 'BLDRS Developed Markets 100 ADR Index Fund', 139);
insert into BOOK (SKU, BARCODE, PRICE, STORGQUANT, VENDORID, CATEGORY, GENRE, TITLE, AUTHOR, LANGUAGE, PUBLISHER, NUMOFPAGES) values (100559, '177217109490', 34, 57, 2, 'book', 'drama', 'Who''s Afraid of Virginia Woolf?', 'Worden Gimson', 'Azeri', 'The Obesity ETF', 79);
insert into BOOK (SKU, BARCODE, PRICE, STORGQUANT, VENDORID, CATEGORY, GENRE, TITLE, AUTHOR, LANGUAGE, PUBLISHER, NUMOFPAGES) values (100870, '164695223230', 2.29, 32, 11, 'book', 'comedy', 'How to Make Love to a Woman', 'Camilla Durrington', 'Bengali', 'ArcelorMittal', 179);

-- NOTEBOOK --
insert into NOTEBOOK (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, FORMAT, RECYCLPAPER, NUMOFPAGES) values (200903, '244142131020', 15, 25, 'notebook', 1, 'lines', 'A5', 'n', 30);
insert into NOTEBOOK (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, FORMAT, RECYCLPAPER, NUMOFPAGES) values (200219, '268578842240', 16.75, 44, 'notebook', 2, 'square', 'A6', 'y', 77);
insert into NOTEBOOK (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, FORMAT, RECYCLPAPER, NUMOFPAGES) values (200914, '284248151258', 4.36, 63, 'notebook', 2, 'square', 'A6', 'y', 59);
insert into NOTEBOOK (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, FORMAT, RECYCLPAPER, NUMOFPAGES) values (200701, '276573990043', 22, 13, 'notebook', 5, 'lines', 'A4', 'y', 60);
insert into NOTEBOOK (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, FORMAT, RECYCLPAPER, NUMOFPAGES) values (200967, '246999312832', 11, 11, 'notebook', 11, 'square', 'A4', 'n', 45);
insert into NOTEBOOK (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, FORMAT, RECYCLPAPER, NUMOFPAGES) values (200191, '222448851165', 21, 16, 'notebook', 11, 'lines', 'A4', 'y', 60);
insert into NOTEBOOK (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, FORMAT, RECYCLPAPER, NUMOFPAGES) values (200590, '205782781380', 9.17, 53, 'notebook', 6, 'lines', 'A3', 'y', 37);
insert into NOTEBOOK (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, FORMAT, RECYCLPAPER, NUMOFPAGES) values (200633, '253939977959', 12.86, 66, 'notebook', 9, 'square', 'A2', 'y', 35);
insert into NOTEBOOK (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, FORMAT, RECYCLPAPER, NUMOFPAGES) values (200029, '278054211492', 54, 55, 'notebook', 2, 'square', 'A5', 'n', 25);
insert into NOTEBOOK (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, FORMAT, RECYCLPAPER, NUMOFPAGES) values (200201, '232705575096', 32, 19, 'notebook', 1, 'lines', 'A5', 'n', 70);
insert into NOTEBOOK (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, FORMAT, RECYCLPAPER, NUMOFPAGES) values (200939, '270113271707', 7.08, 57, 'notebook', 6, 'lines', 'A4', 'y', 52);

-- PEN
insert into PEN (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, SIZE, COLOUR) values (300917, '382392014024', 4.95, 300, 'pen', 2, 1, 'goldenrod');
insert into PEN (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, SIZE, COLOUR) values (300465, '399134004209', 2, 516, 'pen', 3, 0.5, 'blue');
insert into PEN (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, SIZE, COLOUR) values (300889, '310991751312', 3.77, 349, 'pen', 4, 1, 'blue');
insert into PEN (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, SIZE, COLOUR) values (300840, '331958902807', 1, 283, 'pen', 4, 0.5, 'blue');
insert into PEN (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, SIZE, COLOUR) values (300646, '396547370650', 4.94, 200, 'pen', 5, 0.2, 'aquamarine');
insert into PEN (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, SIZE, COLOUR) values (300602, '371705125136', 4.27, 478, 'pen', 7, 1, 'black');
insert into PEN (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, SIZE, COLOUR) values (300212, '307060722629', 2.83, 265, 'pen', 7, 1, 'red');
insert into PEN (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, SIZE, COLOUR) values (300732, '321032519138', 2.5, 242, 'pen', 2, 0.5, 'black');
insert into PEN (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, SIZE, COLOUR) values (300905, '317316446721', 2.41, 220, 'pen', 6, 0.5, 'green');
insert into PEN (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, SIZE, COLOUR) values (300852, '390691994884', 2.73, 547, 'pen', 5, 1, 'black');
insert into PEN (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, SIZE, COLOUR) values (300750, '346692054693', 3.54, 254, 'pen', 1, 0.5, 'black');

-- PENCIL --
insert into PENCIL (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, ERASER, COLOUR) values (400381, '451737689715', 2.67, 198, 'pencil', 9, 'HB2', 'y', 'black');
insert into PENCIL (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, ERASER, COLOUR) values (400088, '446831475920', 3, 152, 'pencil', 1, 'B2', 'y', 'pink');
insert into PENCIL (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, ERASER, COLOUR) values (400617, '404806024068', 3, 23, 'pencil', 2, 'HB', 'y', 'fuscia');
insert into PENCIL (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, ERASER, COLOUR) values (400501, '461373751869', 2.31, 44, 'pencil', 7, 'B3', 'y', 'aquamarine');
insert into PENCIL (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, ERASER, COLOUR) values (400001, '430127769190', 3.07, 102, 'pencil', 7, 'B1', 'y', 'mauv');
insert into PENCIL (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, ERASER, COLOUR) values (400399, '486765707563', 2, 62, 'pencil', 3, 'HB', 'y', 'maroon');
insert into PENCIL (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, ERASER, COLOUR) values (400913, '417995635898', 6, 126, 'pencil', 4, 'HB2', 'n', 'khaki');
insert into PENCIL (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, ERASER, COLOUR) values (400557, '477109969783', 3, 12, 'pencil', 4, 'H1', 'n', 'aquamarine');
insert into PENCIL (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, ERASER, COLOUR) values (400663, '444227051891', 3.58, 128, 'pencil', 2, 'B4', 'y', 'orange');
insert into PENCIL (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, ERASER, COLOUR) values (400049, '459352433377', 1, 141, 'pencil', 5, 'B2', 'n', 'green');
insert into PENCIL (SKU, BARCODE, PRICE, STORGQUANT, CATEGORY, VENDORID, TYPE, ERASER, COLOUR) values (400888, '469232709420', 3.18, 195, 'pencil', 6, 'H2', 'y', 'crimson');

-- BASKET --
insert into BASKET (ID, TOTALPRICE, ORDERNO, CARDNO, EMAIL, SKU, QUANTITY) values (1,  16.48,    1,  3538,      'camélia.pevreal@hud.gov',       100119, 1);
insert into BASKET (ID, TOTALPRICE, ORDERNO, CARDNO, EMAIL, SKU, QUANTITY) values (2, 181.26,    6,  35781345,  'lài.stores@i2i.jp',             100754, 9);
insert into BASKET (ID, TOTALPRICE, ORDERNO, CARDNO, EMAIL, SKU, QUANTITY) values (3,     46,    9,  35762492,  'félicie.chicco@123-reg.co.uk',  400913, 8);
insert into BASKET (ID, TOTALPRICE, ORDERNO, CARDNO, EMAIL, SKU, QUANTITY) values (4,     24,    3,       356,  'mélanie.tolland@google.com',    100181, 5);
insert into BASKET (ID, TOTALPRICE, ORDERNO, CARDNO, EMAIL, SKU, QUANTITY) values (5,   9.88,   4,     35684,  'illustrée.barehead@1688.com',   300646, 2);
insert into BASKET (ID, TOTALPRICE, ORDERNO, CARDNO, EMAIL, SKU, QUANTITY) values (6,      9,    1,      3538,  'camélia.pevreal@hud.gov',       300840, 9);
insert into BASKET (ID, TOTALPRICE, ORDERNO, CARDNO, EMAIL, SKU, QUANTITY) values (7,     34,    2,      3538,  'camélia.pevreal@hud.gov',       100559, 1);
insert into BASKET (ID, TOTALPRICE, ORDERNO, CARDNO, EMAIL, SKU, QUANTITY) values (8,  21.24,    7,      5602,  'réjane.aprahamian@tamu.edu',    200939, 3);
insert into BASKET (ID, TOTALPRICE, ORDERNO, CARDNO, EMAIL, SKU, QUANTITY) values (9,  18.85,    3,       356,  'mélanie.tolland@google.com',    300889, 5);
insert into BASKET (ID, TOTALPRICE, ORDERNO, CARDNO, EMAIL, SKU, QUANTITY) values (10,   324,    3,       356,  'mélanie.tolland@google.com',    200029, 6);
insert into BASKET (ID, TOTALPRICE, ORDERNO, CARDNO, EMAIL, SKU, QUANTITY) values (11, 49.44,    3,       356,  'mélanie.tolland@google.com',    100119, 3);
insert into BASKET (ID, TOTALPRICE, ORDERNO, CARDNO, EMAIL, SKU, QUANTITY) values (12,   320,    2,      3538,  'camélia.pevreal@hud.gov',      200201, 10);
insert into BASKET (ID, TOTALPRICE, ORDERNO, CARDNO, EMAIL, SKU, QUANTITY) values (13, 14.15,    9,  35762492, 'félicie.chicco@123-reg.co.uk',  300212,  5);
